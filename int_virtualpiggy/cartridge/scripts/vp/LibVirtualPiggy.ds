/**
*	This file is intended to be the only file that should be imported to scripts.
*	It should contain only functions that work with SOAP connector.
*	All helper/util functions are dedicated into VirtualPiggyUtils.ds file.
*
*	@author Agnislav Onufrijchuk, Astound Commerce
*	@version 1.0
*/

importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.web );

importScript("WebServiceInvoker.ds");
importScript("vp/VirtualPiggyUtils.ds");

function VirtualPiggyObject() {
	
	var object = {
		_serviceName	: "VirtualPiggy",
		utils			: VirtualPiggyUtilsObject()
	};
	
	/**
	*	All methods return object with at least status {Boolean} value.
	*	Please note that always a single object is returned with fields inside.
	*	For simplicity @returns jsdoc tag will list only unique object fields.
	*/
	
	
	/**
	*	Tries to authenticate a Child or a Parent user
	*
	*	@param username
	*	@param password
	*	@returns token - unique user id for further usage
	*	@returns userType - user type (child or parent)
	*/
	
	object.authenticateUser = function (username : String, password : String) {
		try {
			var response = WebServiceInvoker.invoke(this._serviceName, "authenticateUser", username, password);
			return response;
		} catch(e) {
			return this.utils.catchTheException(e);
		}
	};
	
	
	/**
	*	Captures or Voids a given transaction
	*/
	
	object.captureTransactionByIdentifier = function (transactionID : String, isCapture : Boolean) {
		try {
			var response = WebServiceInvoker.invoke(this._serviceName, "captureTransactionByIdentifier", transactionID, isCapture);
			return response;
		} catch(e) {
			return this.utils.catchTheException(e);
		}
	};
	
	
	/**
	*	Retrieves a list of all children of a given parent
	*/
	
	object.getAllChildren = function (parentToken : String) {
		try {
			var response = WebServiceInvoker.invoke(this._serviceName, "getAllChildren", parentToken);
			return response;
		} catch(e) {
			return this.utils.catchTheException(e);
		}
	};
	
	
	/**
	*	Retrieves a Child's address during Child checkout
	*	@param childToken
	*	@returns
	*/
	
	object.getChildAddress = function (childToken : String) {
		try {
			var response = WebServiceInvoker.invoke(this._serviceName, "getChildAddress", childToken);
			response.status = response.status == "Success" ? true : false;
			return response;
		} catch(e) {
			return this.utils.catchTheException(e);
		}
	};
	
	
	/**
	*	Retrieves a Parent's address during Parent checkout
	*/
	
	object.getParentAddress = function (parentToken : String) {
		try {
			var response = WebServiceInvoker.invoke(this._serviceName, "getParentAddress", parentToken);
			response.status = response.status == "Success" ? true : false;
			return response;
		} catch(e) {
			return this.utils.catchTheException(e);
		}
	};
	
	
	/**
	*	Retrieves a Child's address during Parent checkout
	*/
	
	object.getParentChildAddress = function (parentToken : String, childID : String) {
		try {
			var response = WebServiceInvoker.invoke(this._serviceName, "getParentChildAddress", parentToken, childID);
			response.status = response.status == "Success" ? true : false;
			return response;
		} catch(e) {
			return this.utils.catchTheException(e);
		}
	};
	
	
	/**
	*	Retrieves a list of all Parent's payment accounts
	*/
	
	object.getPaymentAccounts = function (parentToken : String) {
		try {
			var response = WebServiceInvoker.invoke(this._serviceName, "getPaymentAccounts", parentToken);
			return response;
		} catch(e) {
			return this.utils.catchTheException(e);
		}
	};
	
	
	/**
	*	Pings the VirtualPiggy server using credentials set in Business Manager
	*/
	
	object.pingHeaders = function() {
		try {
			var response = WebServiceInvoker.invoke(this._serviceName, "pingHeaders");
			return response;
		} catch(e) {
			return this.utils.catchTheException(e);
		}
	};
	
	
	/**
	*	Submits a cart during Parent checkout
	*/
	
	object.processParentTransaction = function (parentToken : String, checkoutXML : String, description : String, 
												childID : String, paymentAccountID : String) {
		try {
			var response = WebServiceInvoker.invoke(this._serviceName, "processParentTransaction", parentToken, 
													checkoutXML, description, childID, paymentAccountID);
			return response;
		} catch(e) {
			return this.utils.catchTheException(e);
		}
	};
	
	/**
	*	Submits a cart during Parent checkout (returns back card data)
	*/
	
	object.processParentTransactionV2 = function (parentToken : String, checkoutXML : String, description : String, 
												childID : String, paymentAccountID : String) {
		try {
			var response = WebServiceInvoker.invoke(this._serviceName, "processParentTransactionV2", parentToken, 
													checkoutXML, description, childID, paymentAccountID);
			return response;
		} catch(e) {
			return this.utils.catchTheException(e);
		}
	};
	
	/**
	*	Submits a cart during Child checkout
	*/
	
	object.processTransaction = function (childToken : String, checkoutXML : String, description : String) {
		try {
			var response = WebServiceInvoker.invoke(this._serviceName, "processTransaction", childToken, checkoutXML, description);
			return response;
		} catch(e) {
			return this.utils.catchTheException(e);
		}
	};

	/**
	*	Submits a cart during Child checkout (returns back card data)
	*/
	
	object.processTransactionV2 = function (childToken : String, checkoutXML : String, description : String) {
		try {
			var response = WebServiceInvoker.invoke(this._serviceName, "processTransactionV2", childToken, checkoutXML, description);
			return response;
		} catch(e) {
			return this.utils.catchTheException(e);
		}
	};
	
	return object;
}