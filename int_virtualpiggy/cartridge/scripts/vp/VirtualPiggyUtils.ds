/**
*	This library is to test Virtual Piggy methods implementation.
*	All credentials are stored in the vptest.properties resource file.
*	The cart dummy data is located in _prepareCheckoutXML function below.
*
*	@author Agnislav Onufrijchuk, Astound Commerce
*	@version 1.0
*/

importPackage( dw.order );
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.web );

function VirtualPiggyUtilsObject() {
	
	var object = {};

	
	/**
	*	Catchs an exception given
	*/
	
	object.catchTheException = function (e) : Object {
		var response = {
				"status": false,
				"errorMessage" : e.faultString || e.message
			};
		return response;
	};
	
	
	/**
	*	Returns true if Manual Capture is turned on for current site
	*/
	
	object.isManualCapture = function () : Boolean {
		return Site.getCurrent().getCustomPreferenceValue("vpManualCapture") ? true : false;
	};
	
	
	/**
	*	Returns true if Manual Capture is turned on for current site
	*/
	
	object.getShippingMethodID = function () : Boolean {
		return Site.getCurrent().getCustomPreferenceValue("vpShippingMethodID");
	};
	
	
	/**
	*	Converts a HashMap given into valid JSON string.
	*	Note: Doesn't support nesting arrays/hashmaps/objects etc.
	*/
	
	object.convertToJSON = function (hashmap : HashMap) {
		
		var jsonArray : Array = [];
		
		var keys : Set = hashmap.keySet();
		for each(key in keys) {
			jsonArray.push('"' + key + '" : "' + hashmap[key] + '"');
		}
		var jsonString : String = "{" + jsonArray.join(', ') + "}";
		
		return jsonString;
	};
	
	object.prepareTransactionXML = function (basket : Basket, orderNo : String) : XML {
		//shipment-discount
		
		var shippingadjustments : Iterator = basket.allShippingPriceAdjustments.iterator();
		var totalShippingDiscount = 0;
		while (shippingadjustments.hasNext()) {
			var shippingAdjustment : PriceAdjustment = shippingadjustments.next();
			totalShippingDiscount += shippingAdjustment.priceValue;
		}
		
		var cart : XML = <cart currency={this.getCurrency()} total={basket.totalGrossPrice.value}>
				<cart-shipment total={basket.totalGrossPrice.value} shipment-reference={orderNo}>
					<shipment-tax total={basket.totalTax.value}/>
					<shipment-cost total={basket.shippingTotalNetPrice.value}/>
					<shipment-discount total={totalShippingDiscount}/>
					<shipment-address/>
					<items/>							
				</cart-shipment>				
			</cart>;
		
		this._setShipmentAddress(cart, basket);
				
		var products : Iterator = basket.productLineItems.iterator();
		while (products.hasNext()) {
			var product : ProductLineItem = products.next();
		
			var totalProductAdjustment = 0;
			var priceAdjustments : Iterator = product.priceAdjustments.iterator();
				while (priceAdjustments.hasNext()) {
					var productAdjustment : PriceAdjustment = priceAdjustments.next();
					totalProductAdjustment += productAdjustment.priceValue;
				}
			
			var itemXML : XML = <item total={product.adjustedNetPrice.value} discount={totalProductAdjustment}></item>;						
			itemXML.appendChild(this._cdata(new XML(<item-name/>), product.productName));
			itemXML.appendChild(this._cdata(new XML(<item-description/>), product.product.shortDescription));
			itemXML.appendChild(this._cdata(new XML(<item-price/>), product.basePrice.value));				
			itemXML.appendChild(this._cdata(new XML(<item-quantity/>), product.quantityValue));
			
			cart.descendants("items")[0].appendChild(itemXML);
		};
		
		var expDate : String = this._cdata(new XML(<expirationDate/>), this._getStrDate());
		cart.appendChild(expDate);
				
		return cart;
	};
	
	object._cdata = function (node : XML, string : String) : XML {		
		var xmlData : XML = new XML();
		if(!empty(string)){
			xmlData = new XML("<![CDATA[" + string + "]]>");
		}
	    node.appendChild(xmlData);
	    return node;            
	};
		
	object._setShipmentAddress = function (cart : XML, basket : Basket) : XML {
		var shipment : Shipment = basket.getShipments()[0];
		var shipmentAddress : OrderAddress = shipment.getShippingAddress();
		
		var shipmentAddressXML : XML = cart.descendants("shipment-address")[0];
		shipmentAddressXML.appendChild(this._cdata(new XML(<address/>), shipmentAddress.getAddress1()));
		shipmentAddressXML.appendChild(this._cdata(new XML(<zip/>), shipmentAddress.getPostalCode()));
		shipmentAddressXML.appendChild(this._cdata(new XML(<city/>), shipmentAddress.getCity()));
		shipmentAddressXML.appendChild(this._cdata(new XML(<state/>), shipmentAddress.getStateCode()));
		shipmentAddressXML.appendChild(this._cdata(new XML(<country/>), shipmentAddress.getCountryCode()));
		shipmentAddressXML.appendChild(this._cdata(new XML(<phone/>), shipmentAddress.getPhone()));
		shipmentAddressXML.appendChild(this._cdata(new XML(<name/>), shipmentAddress.getFullName()));
		//TODO
		shipmentAddressXML.appendChild(this._cdata(new XML(<attention-of/>), ""));	            
	};
	
	object._getStrDate = function () : XML {		
		var daysToOrderExpire : Number = Site.getCurrent().getCustomPreferenceValue("vpOrderExpirationDays");		
		if(empty(daysToOrderExpire)){
			// default number days for expired 
			daysToOrderExpire = 7;
		}
				 
		var expDate = new Calendar();
		expDate.add(Calendar.DATE, daysToOrderExpire);		
		
		var dateStr : String = StringUtils.formatCalendar(expDate, "MM/dd/yyyy hh:mm:ss aa");
	    return dateStr;            
	};

	object.prepareTransactionDescription = function (basket : Basket, orderNo : String) : String {
		var productsDescription : String = "";
		var productLineItems : Iterator = basket.getProductLineItems().iterator();
		while (!empty(productLineItems) && productLineItems.hasNext()){
			var productLine : ProductLineItem = productLineItems.next();
			productsDescription = productsDescription + productLine.getLineItemText();
			if(productLineItems.hasNext()){
				productsDescription = productsDescription + ", ";
			} 
		}
		var description : String = orderNo + " " + productsDescription;
		return description;
	};
	
	object.getCurrency = function () : String {
		var currency : String = Site.getCurrent().getCustomPreferenceValue("vpCurrencyID") || Site.getCurrent().getDefaultCurrency();
		return currency;
	};
	
	return object;
}