/**
*	This library is to test Virtual Piggy methods implementation.
*	All credentials are stored in the vptest.properties resource file.
*	The cart dummy data is located in _prepareCheckoutXML function below.
*
*	@author Agnislav Onufrijchuk, Astound Commerce
*	@version 1.0
*/

importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.web );

importScript("vp/LibVirtualPiggy.ds");

function VirtualPiggyTestObject() {
	
	var object = {
		VP					: VirtualPiggyObject(),
		_childID			: null,
		_paymentAccountID	: null,
		_transactionID		: null,
		_userToken			: null,
		_userType			: null
	};
	
	
	/**
	*	SINGLE PING TEST
	*/
	
	/**
	*	Tries to connect to the Virtual Piggy server using credentials set up in Business Manager
	*	@memberOf object
	*/
	
	object.pingHeaders = function() {
		var result : Object = this.VP.pingHeaders();
		result.functionName = "pingHeaders";
		return result;
	};
	
	
	/**
	*	CHILD CHECKOUT TEST SET
	*/
	
	/**
	*	Tries to authenticate a child using credentials stored in a resource file.
	*	Gets child credentials and calls _authenticateUser function for the authentication itself.
	*	In case of success the _authencateUser function stores the child's token for future calls
	*/
	
	object.authenticateChild = function() {
		var credentials = this._prepareChildCredentials();
		var result : Object = this._authenticateUser(credentials);
		
		return result;
	};
	
	
	/**
	*	Retrieves a Child's address using the token returned by authentication function
	*/
	
	object.getChildAddress = function() {
		var result : Object = this.VP.getChildAddress(this._userToken);
		result.functionName = "getChildAddress";
		if (result.status) {
			result.responseDetails = [result.address, result.city, result.state, result.country, result.zip].join(", ");
		}
		return result;
	};
	
	
	/**
	*	Submits a cart to a Virtual Piggy server.
	*	Stores the transaction id in case of success
	*/
	
	object.processTransaction = function() {
		var result : Object = this.VP.processTransaction(this._userToken, this._prepareCheckoutXML(), this._prepareTransactionDescription());
		result.functionName = "processTransaction";
		if (result.status) {
			this._transactionID = result.transactionIdentifier;
			result.responseDetails = [Resource.msg('vptest.label.transactionid', 'vptest', null), result.transactionIdentifier].join(": ");
		}
		return result;
	};
	
	
	/**
	*	Captures the transaction using the transaction id stored after transaction procession
	*/
	
	object.captureTransactionByIdentifierCapture = function() {
		var result = object._captureTransactionByIdentifier(true);
		return result;
	};
	
	
	/**
	*	PARENT CHECKOUT TEST SET
	*/
	
	/**
	*	Tries to authenticate a parent using credentials stored in a resource file.
	*	Gets parent credentials and calls _authenticateUser function for the authentication itself.
	*	In case of success the _authencateUser function stores the parent's token for future calls
	*/
	
	object.authenticateParent = function() {
		var credentials = this._prepareParentCredentials();
		var result : Object = this._authenticateUser(credentials);
		return result;
	};


	/**
	*	Retrieves a list of a Parent's children.
	*	Save the first from list for future transactions.
	*/
	
	object.getAllChildren = function() {
		var parentToken = this._userToken;
		var result : Object = this.VP.getAllChildren(parentToken);
		
	       
		result.functionName = "getAllChildren";
		if (!empty(result.resultArray)) {				
		/** if (result.resultArray.length) { */

			/** Save children ID for upcoming actions */
			this._childID = result.resultArray[0].identifier;
			
			/** Save children names for test report */
			var childNames : Array = [];
			for (var i in result.resultArray) {
				var childName = result.resultArray[i].name;
				childNames.push(childName);
			}
			result.responseDetails = Resource.msg('vptest.message.childrenfound', 'vptest', null) + childNames.join(", ");
		} 
		
		return result;
	};
	
	
	/**
	*	Requests a Parent's address.
	*/
	
	object.getParentAddress = function() {
		var result : Object = this.VP.getParentAddress(this._userToken);
		result.functionName = "getParentAddress";
		if (result.status) {
			result.responseDetails = [result.address, result.city, result.state, result.country, result.zip].join(", ");
		}
		return result;
	};
	
	
	/**
	*	Requests a given Child's address.
	*/
	
	object.getParentChildAddress = function() {
		var result : Object = this.VP.getParentAddress(this._userToken, this._childID);
		result.functionName = "getParentChildAddress";
		if (result.status) {
			result.responseDetails = [result.address, result.city, result.state, result.country, result.zip].join(", ");
		}
		return result;
	};


	/**
	*	Retrieves a list of a Parent's payment accounts.
	*	Save the first from list for future transactions.
	*/
	
	object.getPaymentAccounts = function() {
		var parentToken = this._userToken;
		var result : Object = this.VP.getPaymentAccounts(parentToken);
		result.functionName = "getPaymentAccounts";
		if (result.resultArray && result.resultArray.length) {

			/** Save payment account ID for upcoming actions */
			this._paymentAccountID = result.resultArray[0].identifier;
			
			/** Save payment accounts info for test report */
			var paymentAccounts : Array = [];
			for (var i in result.resultArray) {
				var paymentAccount = result.resultArray[i].name;
				paymentAccounts.push(paymentAccount);
			}
			result.responseDetails = Resource.msg('vptest.message.paymentaccountsfound', 'vptest', null) + ": " + paymentAccounts.join(", ");
		}
		
		return result;
	};
	
	
	/**
	*	Submits a cart to a Virtual Piggy server.
	*	Stores the transaction id in case of success
	*/
	
	object.processParentTransaction = function() {
		var result : Object = this.VP.processParentTransaction(
			this._userToken, this._prepareCheckoutXML(), this._prepareTransactionDescription(),
			this._childID, this._paymentAccountID);
			
		result.functionName = "processParentTransaction";
		if (result.status) {
			this._transactionID = result.transactionIdentifier;
			result.responseDetails = [Resource.msg('vptest.label.transactionid', 'vptest', null), result.transactionIdentifier].join(": ");
		}
		return result;
	};
	
	
	/**
	*	Voids the transaction using the transaction id stored after transaction procession
	*/
	
	object.captureTransactionByIdentifierVoid = function() {
		var result = object._captureTransactionByIdentifier(false);
		return result;
	};
	
	
	// COMMON HELPER FUNCTIONS //
	
	object._authenticateUser = function (credentials : String) {
		var result : Object = this.VP.authenticateUser(credentials.username, credentials.password);
		result.functionName = "authenticateUser"; 
		
		if (!empty(result.userType)) {
			result.responseDetails = Resource.msg('vptest.message.usertype', 'vptest', null) + result.userType;
			this._userToken = result.token;
			this._userType = result.userType;
		}
		return result;
	}
	
	object._captureTransactionByIdentifier = function(isCapture : Boolean) {
		if (!this.VP.utils.isManualCapture()) {
			var result : Object = {
				functionName: "captureTransactionByIdentifier(mock)",
				status: true,
				responseDetails: Resource.msg('vptest.error.nomanualcapture', 'vptest', null)
			};
			return result;
		}
		
		if (this._transactionID) {
			var result : Object = this.VP.captureTransactionByIdentifier(this._transactionID, isCapture);
		} else {
			var result : Object = {
				status: false,
				errorMessage: Resource.msg('vptest.error.notransactionid', 'vptest', null)
			};
		}
		var operationRequested = isCapture ? Resource.msg('vptest.message.capture', 'vptest', null) : Resource.msg('vptest.message.void', 'vptest', null);
		result.functionName = "captureTransactionByIdentifier(" + operationRequested +")";
		return result;
	};
	
	object._prepareChildCredentials = function () {
		return {
			username: Resource.msg('vptest.data.childlogin', 'vptest', null),
			password: Resource.msg('vptest.data.childpassword', 'vptest', null)
		}
	};
	
	object._prepareParentCredentials = function () {
		return {
			username: Resource.msg('vptest.data.parentlogin', 'vptest', null),
			password: Resource.msg('vptest.data.parentpassword', 'vptest', null)
		}
	};
	
	object._prepareCheckoutXML = function () {
		var checkoutXML : XML = 
			<cart currency="USD" total="20">
				<cart-shipment total="10">
					<shipment-tax total="0"/>
					<shipment-cost total="10"/>
					<shipment-discount total="0"/>
					<items>
						<item total="4.5">
							<item-name><![CDATA[Mock item]]></item-name>
							<item-description><![CDATA[Mock description]]></item-description>
							<item-price><![CDATA[4.5]]></item-price>
							<item-quantity><![CDATA[1]]></item-quantity>
						</item>
						<item total="5.5">
							<item-name><![CDATA[Mock item number 2]]></item-name>
							<item-description><![CDATA[Mock description number 2]]></item-description>
							<item-price><![CDATA[5.5]]></item-price>
							<item-quantity><![CDATA[1]]></item-quantity>
						</item>
					</items>
				</cart-shipment>
			</cart>
		;
		return checkoutXML;
	};
	
	object._prepareTransactionDescription = function () {
		return Resource.msg('vptest.data.transactiondescription', 'vptest', null) + "(" + this._userType + ")";
	};
	
	return object;
}